stages:
  - deploy

deploy:
  stage: deploy
  image: alpine:latest # Use a base image with Python installed
  before_script:
    - apk update
    - apk add --no-cache git openssh ansible
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "HOST *" > ~/.ssh/config
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - |
      if changed_tasks=($(git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep "^ansible/*/.*\.yml$")); then
        chmod 700 ansible
        cd ansible
        echo "$ANSIBLE_VAULT_PASSWORD" > .vault_password.txt
        #check for role
        for updated_task in "${changed_tasks[@]}"; do
          basename=$(basename "$updated_task")
          role=$(echo "$updated_task" | awk -F/ '{print $3}')
          if [ "$role" != "containers" ] && [ "$basename" = "main.yml" ]; then
            echo "The following roles have been updated: $role"
            echo "Running Ansible playbook..."
            ansible-playbook deploy-homelab.yml --tags "$role" --vault-password-file .vault_password.txt
          elif [ "$role" = "containers" ] && [ "$basename" != "main.yml" ]; then
            echo "The following task file has been updated: $updated_task"
            echo "Running Ansible playbook..."
            tags="${basename%.*}_install"
            ansible-playbook deploy-homelab.yml --tags "$tags" --vault-password-file .vault_password.txt
          fi
        done
      else
        echo "No changes detected in task files. Skipping Ansible playbook execution."
      fi
  only:
    - master